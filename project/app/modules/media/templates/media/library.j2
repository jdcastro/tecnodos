{% extends "base.j2" %}

{% set dashboard = true %}

{% block content %}
<div class="flex items-center justify-between mb-6">
  <div>
    <h1 class="text-2xl font-semibold text-gray-900 dark:text-white">Biblioteca de Medios</h1>
    <p class="text-sm text-gray-500 dark:text-gray-300">Gestiona imágenes: TIFF, PNG, JPG, JPEG</p>
  </div>
  <div class="flex gap-2">
    <a href="{{ url_for('media.upload_s3') }}" class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-md bg-indigo-100 text-indigo-800 hover:bg-indigo-200 dark:bg-indigo-900 dark:text-indigo-200">Importar desde S3</a>
    <a href="{{ url_for('media.upload_local') }}" class="inline-flex items-center px-4 py-2 text-sm font-medium rounded-md bg-blue-600 text-white hover:bg-blue-700">Subir desde el equipo</a>
  </div>
  </div>

  <form method="get" class="flex flex-wrap items-end gap-3 mb-4">
    <div>
      <label for="q" class="block text-xs text-gray-500 dark:text-gray-300 mb-1">Buscar</label>
      <input id="q" name="q" type="text" placeholder="Nombre del archivo…" value="{{ q }}" class="w-64 px-3 py-2 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
    </div>
    <div>
      <label for="type" class="block text-xs text-gray-500 dark:text-gray-300 mb-1">Tipo</label>
      <select id="type" name="type" class="px-3 py-2 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
        <option value="all" {{ 'selected' if type_filter == 'all' else '' }}>Todos</option>
        <option value="image" {{ 'selected' if type_filter == 'image' else '' }}>Imágenes (PNG, JPG, JPEG)</option>
        <option value="geotiff" {{ 'selected' if type_filter == 'geotiff' else '' }}>TIFF</option>
      </select>
    </div>
    <div>
      <label for="per_page" class="block text-xs text-gray-500 dark:text-gray-300 mb-1">Por página</label>
      <select id="per_page" name="per_page" class="px-3 py-2 rounded-md border border-gray-300 dark:border-gray-700 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-blue-500">
        {% for n in [12,24,48,96] %}
          <option value="{{ n }}" {% if per_page == n %}selected{% endif %}>{{ n }}</option>
        {% endfor %}
      </select>
    </div>
    <div class="ml-auto flex items-center gap-2">
      <button class="px-4 py-2 rounded-md bg-gray-100 dark:bg-gray-800 text-gray-800 dark:text-gray-200">Aplicar</button>
      {% if q or (type_filter and type_filter != 'all') or per_page != 24 %}
        <a href="{{ url_for('media.library') }}" class="px-4 py-2 rounded-md border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-200">Limpiar</a>
      {% endif %}
    </div>
  </form>

  <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
    {% if items and items|length > 0 %}
      {% for it in items %}
      <div class="rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900 ">
        <div class="aspect-video bg-gray-100 dark:bg-gray-800 flex items-center justify-center text-gray-400">
          {% if it.ext in ['png','jpg','jpeg'] %}
            <img src="{{ url_for('media.serve_file', key=it.storage_key) }}" alt="{{ it.original_name }}" class="h-full w-full object-cover"/>
          {% else %}
            <span class="text-xs px-2 py-1 rounded bg-gray-200 dark:bg-gray-700">{{ it.ext|upper }}</span>
          {% endif %}
        </div>
        <div class="p-3">
          <div class="flex items-start justify-between gap-2">
            <div class="min-w-0">
              <p class="truncate text-sm font-medium text-gray-900 dark:text-gray-100" title="{{ it.original_name }}">{{ it.original_name }}</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">{{ it.width or '?' }}×{{ it.height or '?' }} • {{ (it.size_bytes/1024)|round(1) }} KB</p>
            </div>
            <div class="relative inline-block text-left">
              <button type="button" class="px-2 py-1 text-xs rounded-md bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-200" onclick="toggleMenu('{{ it.id }}')">⋯</button>
              <div id="menu-{{ it.id }}" class="hidden absolute right-0 mt-2 w-36 rounded-md shadow-lg bg-white dark:bg-gray-900 ring-1 ring-black ring-opacity-5 z-20">
                <div class="py-1">
                  <a href="{{ url_for('media.serve_file', key=it.storage_key) }}" target="_blank" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800">Ver</a>
                  <a href="{{ url_for('media.download_file', key=it.storage_key) }}" class="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800">Descargar</a>
                  <button type="button" onclick="deleteAsset({{ it.id }})" class="w-full text-left block px-4 py-2 text-sm text-red-700 dark:text-red-400 hover:bg-red-50 dark:hover:bg-gray-800">Eliminar</button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      {% endfor %}
    {% else %}
      {% for i in range(1,9) %}
      <div class="rounded-lg border border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-900">
        <div class="aspect-video bg-gray-100 dark:bg-gray-800 flex items-center justify-center text-gray-400">Vista previa</div>
        <div class="p-3">
          <div class="flex items-start justify-between gap-2">
            <div class="min-w-0">
              <p class="truncate text-sm font-medium text-gray-900 dark:text-gray-100">archivo_{{ i }}.jpg</p>
              <p class="text-xs text-gray-500 dark:text-gray-400">1200×800 • 256 KB</p>
            </div>
            <button class="px-2 py-1 text-xs rounded-md bg-gray-100 text-gray-700 dark:bg-gray-800 dark:text-gray-200" disabled>⋯</button>
          </div>
        </div>
      </div>
      {% endfor %}
    {% endif %}
  </div>

  <div class="mt-6 flex items-center justify-between text-sm">
    {% if pagination %}
      <span class="text-gray-500 dark:text-gray-300">Página {{ pagination.page }} de {{ pagination.pages }} — {{ pagination.total }} elementos</span>
      <div class="flex gap-2">
        {% set prev_args = request.args.to_dict() %}
        {% set next_args = request.args.to_dict() %}
        {% if pagination.has_prev %}
          {% set _ = prev_args.update({'page': pagination.prev_num}) %}
          <a href="{{ url_for('media.library', **prev_args) }}" class="px-3 py-1 rounded-md border border-gray-300 dark:border-gray-700 text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-900">Anterior</a>
        {% else %}
          <span class="px-3 py-1 rounded-md border border-gray-200 text-gray-400 dark:border-gray-700">Anterior</span>
        {% endif %}
        {% if pagination.has_next %}
          {% set _ = next_args.update({'page': pagination.next_num}) %}
          <a href="{{ url_for('media.library', **next_args) }}" class="px-3 py-1 rounded-md bg-gray-200 text-gray-800 dark:bg-gray-700 dark:text-gray-100">Siguiente</a>
        {% else %}
          <span class="px-3 py-1 rounded-md border border-gray-200 text-gray-400 dark:border-gray-700">Siguiente</span>
        {% endif %}
      </div>
    {% endif %}
  </div>
{% endblock %}
{% block extra_js %}
<script>
function getCookie(name) {
  const value = `; ${document.cookie}`;
  const parts = value.split(`; ${name}=`);
  if (parts.length === 2) return parts.pop().split(';').shift();
}

function toggleMenu(id) {
  const el = document.getElementById(`menu-${id}`);
  if (!el) return;
  el.classList.toggle('hidden');
}

document.addEventListener('click', (e) => {
  // Close open menus when clicking outside
  document.querySelectorAll('[id^="menu-"]').forEach(m => {
    if (!m.contains(e.target) && !m.previousElementSibling?.contains(e.target)) {
      m.classList.add('hidden');
    }
  });
});

async function deleteAsset(id) {
  if (!confirm('¿Eliminar este elemento?')) return;
  const csrf = getCookie('csrf_access_token');
  try {
    const res = await fetch(`${window.location.origin}/api/media/assets/${id}`, {
      method: 'DELETE',
      credentials: 'include',
      headers: { 'X-CSRF-TOKEN': csrf || '' },
    });
    if (res.ok) {
      window.location.reload();
    } else {
      const data = await res.json().catch(() => ({}));
      alert(data.message || 'No se pudo eliminar');
    }
  } catch (err) {
    alert('Error de red al eliminar');
  }
}
</script>
{% endblock %}
