{# index.j2 #}
{% extends "base.j2" %}
{% set dashboard = true %}
{% from "settings/_ui_class.j2" import base_button_classes, input_bg_color, border_color, hover_bg_color, focus_ring_color, button_bg_color, delete_button_bg_color, input_focus_bg_color, text_color %}
{% from "macros/_forms.j2" import render_alert %} {# Import alert macro if you have one #}


{% block extra_css %}
    {{ css_code|safe }}
    {{ super() }}
  <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
  <link rel="stylesheet" href="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.css" />
  <style>
    #map { height: calc(100vh - 56px); }
  </style>
{% endblock %}
{% block extra_head %}
{{ js_code|safe }}
{{ super() }}
{% endblock %}

{% block content %}
<div id="workzone">
  <div class="mb-2 flex gap-2">
    <button id="enter-fullscreen" class="{{ base_button_classes }}">Pantalla completa</button>
    <button id="exit-fullscreen" class="{{ base_button_classes }} hidden">Salir pantalla completa</button>

    <button id="fit-bounds" class="{{ base_button_classes }}">Ajustar imagen</button>

    <label for="uploader" class="{{ base_button_classes }} cursor-pointer">Seleccionar archivo</label>
    <input type="file" id="uploader" accept=".tif,.tiff,.jp2" class="hidden" />
  </div>

  <strong id="status">Sube un GeoTIFF con NIR</strong>
  <div id="map"></div>
</div>
{% endblock %}


{% block extra_js %}
{{ js_code|safe }}
{{ super() }}
  <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
  <script src="https://unpkg.com/leaflet-draw@1.0.4/dist/leaflet.draw.js"></script>
  <script>
    let imgId = null, imgWidth = 0, imgHeight = 0;
    const map = L.map('map', { crs: L.CRS.Simple }).setView([0,0], 0);
    const drawnItems = new L.FeatureGroup();
    map.addLayer(drawnItems);
    const drawCtl = new L.Control.Draw({
      draw: { polygon: true, rectangle: true, polyline: false, circle: false, marker: false },
      edit: { featureGroup: drawnItems }
    });
    map.addControl(drawCtl);
    let overlay = null, bounds = null;

    async function uploadFile(file) {
      const fd = new FormData(); fd.append("file", file);
      const res = await fetch("/api/agrovista/upload", { method: "POST", body: fd });
      if (!res.ok) throw new Error(await res.text());
      return res.json();
    }

    document.getElementById("uploader").addEventListener("change", async (e) => {
      const file = e.target.files[0];
      if (!file) return;
      try {
        document.getElementById("status").textContent = "Procesando...";
        const meta = await uploadFile(file);
        imgId = meta.id; imgWidth = meta.width; imgHeight = meta.height;
        bounds = [[0,0],[imgHeight,imgWidth]];
        if (overlay) map.removeLayer(overlay);
        overlay = L.imageOverlay(`/api/agrovista/image/${imgId}.png`, bounds).addTo(map);
        map.fitBounds(bounds);
        document.getElementById("status").textContent = "Dibuja un polígono o rectángulo sobre el mapa";
      } catch (err) {
        document.getElementById("status").textContent = "Error al procesar el archivo";
      }
    });

    map.on(L.Draw.Event.CREATED, async ({ layer }) => {
      drawnItems.addLayer(layer);
      const latlngs = layer.getLatLngs()[0];
      const verts = latlngs.map(ll => [ll.lng, ll.lat]);
      const res = await fetch("/api/agrovista/protein", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({ id: imgId, vertices: verts })
      });
      const data = await res.json();
      if (!res.ok) { alert(data.description || "Área inválida"); return; }
      alert(`Promedio de proteína: ${data.protein}%`);
    });

    const workzoneEl = document.getElementById('workzone');
    const enterFsBtn = document.getElementById('enter-fullscreen');
    const exitFsBtn = document.getElementById('exit-fullscreen');

    document.getElementById('fit-bounds').addEventListener('click', () => {
      if (overlay) map.fitBounds(bounds);
    });

    enterFsBtn.addEventListener('click', () => {
      workzoneEl.requestFullscreen();
    });

    exitFsBtn.addEventListener('click', () => {
      document.exitFullscreen();
    });

    document.addEventListener('fullscreenchange', () => {
      const isFs = document.fullscreenElement === workzoneEl;
      enterFsBtn.classList.toggle('hidden', isFs);
      exitFsBtn.classList.toggle('hidden', !isFs);
    });
  </script>
{% endblock%}
